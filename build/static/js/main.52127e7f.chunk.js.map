{"version":3,"sources":["logo.svg","components/Media.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Media","props","className","src","title","description","App","useState","posts","setPosts","useEffect","axios","get","process","then","data","mock_data","map","post","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,iHCuC5BC,G,YArCD,SAACC,GACX,OACI,6BAASC,UAAU,SACnB,4BAAQA,UAAU,cACd,uBAAGA,UAAU,kBACb,yBAAKC,IAAI,yCAGb,yBAAKD,UAAU,iBACX,yBAAKA,UAAU,WACf,2BACI,gCAASD,EAAMG,OACf,6BACCH,EAAMI,cAGX,yBAAKH,UAAU,mBACf,yBAAKA,UAAU,cACX,uBAAGA,UAAU,cACb,0BAAMA,UAAU,iBAAgB,uBAAGA,UAAU,mBAE7C,uBAAGA,UAAU,cACb,0BAAMA,UAAU,iBAAgB,uBAAGA,UAAU,qBAE7C,uBAAGA,UAAU,cACb,0BAAMA,UAAU,iBAAgB,uBAAGA,UAAU,sBAKrD,yBAAKA,UAAU,eACX,4BAAQA,UAAU,e,iBCNfI,MArBf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,KAUb,OAPAC,qBAAU,WACRC,IAAMC,IAAN,UAAaC,8CAAb,MACGC,MAAK,YAA+B,IAAZN,EAAW,EAA5BO,KAAMC,UACZP,EAASD,QAEb,IAGA,yBAAKN,UAAU,OACVM,EACCA,EAAMS,KAAI,SAACC,EAAKC,GAAN,OAAe,kBAAC,EAAD,eAAOC,IAAG,UAAKF,EAAKd,MAAV,YAAmBe,IAAYD,OAElE,4CCTUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.52127e7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Media = (props) => {\n    return (\n        <article className=\"media\">\n        <figure className=\"media-left\">\n            <p className=\"image is-64x64\">\n            <img src=\"https://source.unsplash.com/random\"/>\n            </p>\n        </figure>\n        <div className=\"media-content\">\n            <div className=\"content\">\n            <p>\n                <strong>{props.title}</strong>\n                <br/>\n                {props.description}\n            </p>\n            </div>\n            <nav className=\"level is-mobile\">\n            <div className=\"level-left\">\n                <a className=\"level-item\">\n                <span className=\"icon is-small\"><i className=\"fas fa-reply\"></i></span>\n                </a>\n                <a className=\"level-item\">\n                <span className=\"icon is-small\"><i className=\"fas fa-retweet\"></i></span>\n                </a>\n                <a className=\"level-item\">\n                <span className=\"icon is-small\"><i className=\"fas fa-heart\"></i></span>\n                </a>\n            </div>\n            </nav>\n        </div>\n        <div className=\"media-right\">\n            <button className=\"delete\"></button>\n        </div>\n        </article>\n    );\n}\n\nexport default Media;\n","import React, { useState, useEffect }  from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Media from \"./components/Media\";\nimport axios from \"axios\";\n\nfunction App() {\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_API}/`)\n      .then(({data:{mock_data: posts}})=> {\n        setPosts(posts)\n      })\n  },[]);\n  \n  return (\n    <div className=\"App\">\n        {posts?\n          posts.map((post,index)=> <Media key={`${post.title}-${index}`}{...post}/>)\n          :\n          <h1>Loading...</h1>\n        }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}